<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.multi.shop.product.model.dao.ProductMapper">
    <!-- 언더바가 들어가는 쿼리문에 한하여 매핑을 해줘야함 -->
    <!--property : 자바에서 필드 변수 이름,  column : DB 의 해당 컬럼명-->
    <!--DB에서의 기본키 -->
    <!-- 1-1. resultMap의 하위 엘리먼트 -->
    <!--
        <id> : primary key 컬럼을 매핑하기 위한 태그이다. (성능 향상)
        <result> : pk가 아닌 일반 컬럼에 매핑하기 위한 태그이다.
        <constructor> : 인스턴스화 되는 클래스의 생성자에 결과를 삽입하기 위해 사용한다. <idArg>, <arg> 하위 엘리먼트가 있다.
        <association> : 연관관계로 1:1 포함관계인 경우 사용한다.
        <collection> : 연관관계로 1:다 포함관계인 경우 사용한다.
        <discriminator> : 조건에 따라 다른 resultMap이 매핑되도록 한다. 잘사용하지않음

        dto에 기본 생성자, setter 가 생성이 되어 있어야 한다.
    -->

    <resultMap id="productResultSet" type="Product">
        <id property="id" column="ID"/>
        <result property="name" column="NAME"/>
        <result property="content" column="CONTENT"/>
        <result property="price" column="PRICE"/>
        <result property="img" column="IMG"/>
        <result property="status" column="STATUS"/>
        <result property="createDate" column="CREATED_DATE"/>
        <result property="createPerson" column="CREATED_PERSON"/>
        <result property="modifyDate" column="MODIFIED_DATE"/>
        <result property="modifyPerson" column="MODIFIED_PERSON"/>

<!--        association, collection 차이 확인-->
        <association property="company" resultMap="companyResultSet"/>
        <collection property="attachments" resultMap="attachmentResultSet"/>
    </resultMap>

    <resultMap id="companyResultSet" type="Company">
        <id property="id" column="COMPANY_ID"/>
        <result property="name" column="COMPANYNAME"/>
        <result property="addr" column="ADDR"/>
        <result property="tel" column="TEL"/>
    </resultMap>

    <resultMap id="attachmentResultSet" type="Attachment">
        <id property="no" column="ATTACHMENT_NO"/>
        <result property="refProductNo" column="REF_PRODUCT_NO"/>
        <result property="originalName" column="ORIGINAL_NAME"/>
        <result property="savedName" column="SAVED_NAME"/>
        <result property="savePath" column="SAVE_PATH"/>
        <result property="thumbnailPath" column="THUMBNAIL_PATH"/>
        <result property="createDate" column="CREATE_DATE"/>
        <result property="createPerson" column="CREATE_PERSON"/>
        <result property="modifyDate" column="MODIFY_DATE"/>
        <result property="modifyPerson" column="MODIFY_PERSON"/>
    </resultMap>

    <!--
     반환타입을 반드시  설정해야함(둘중한가지는 필수로 작성, 둘다 사용은 안됨)

    resultMap : 위에서 생성한 resultMap을 리턴 타입으로 이용하는 경우
    resultType : 이미 정의되어 있는 타입을 이용하여 리턴 타입으로 이용하는 경우

    파라미터가 한 개인 경우 바인딩 되는 이름은 상관 없다. 파라미터 타입도 지정하지 않아도 된다.
    parameterType : 파라미터로 전달되는 값의 타입을 작성(생략해도 상관없음)

    # 파라미터 타입이 스트링인경우 '' 자동으로 붙여줌
    $ 사용자가 넘긴값 그대로를 넣어줌 -  컬럼명이 유동적으로 바뀌는경우 사용가능. 하지만 추천하는 코드 스타일은아니다.

     #{ code2 } 로 바꿔서 해도 잘됨. 1개인경우는 이름이 중요한거시아니다.

    -->

    <select id="selectList" resultMap="productResultSet" parameterType="Product">
        select a.*, b.id company_id, b.name companyname /*b.id, name 컬럼명 주의*/
        from product a
        join company b on a.company_id = b.id
        where status = 'y'
    </select>

    <select id="selectCompanyList" resultMap="companyResultSet">
        select a.id company_id, a.name companyname , a.addr , a.tel  /*B.NAME 같아서 주의  COMPANYNAME*/
        from company a
        order by a.id asc
    </select>

    <!--insert 추가 속성
        useGenerateKeys : 생성 키 값을 만들기 위해 JDBC의 getGenerateKeys메소드를 호출할지 결정하며 기본값은 false이다. mysql - autoincreament, oracle - sequence
        keyProperty : insert 구문의 하위 엘리먼트인 selectKey 엘리먼트에 의한 반환값을 설정할 프로퍼티를 지정.
     -->
<!--    keyProperty: 가져올 키 값-->
    <insert id="insertProduct" useGeneratedKeys="true" keyProperty="id">
        insert  /* company.id  주의 ProductDTO 내에 있는 CompanyDTO의 id 필드에서 가져오는것*/
        into product
        (
        name
        , content
        , price
        , company_id
        , created_person
        )
        values
        (
        #{ name }
        , #{ content }
        , #{ price }
        , #{ company.id }
        , #{ createPerson }
        )

    </insert>

    <insert id="insertAttachment">
        insert /**/
        into attachment
        (

        ref_product_no
        , original_name
        , saved_name
        , save_path
        , thumbnail_path
        , created_person
        )
        values
        (

        #{ refProductNo }
        , #{ originalName }
        , #{ savedName }
        , #{ savePath }
        , #{ thumbnailPath }
        , #{ createPerson}
        )
    </insert>

    <select id="selectProduct" parameterType="_int" resultMap="productResultSet">
        select /*B.NAME 같아서 주의  COMPANYNAME*/
        A.ID
        , A.NAME
        , A.CONTENT
        , A.PRICE
        , A.COMPANY_ID
        , A.CREATED_DATE
        , A.CREATED_PERSON
        , B.NAME COMPANYNAME <!-- association 확인-->
        , B.TEL
        , C.ORIGINAL_NAME
        , C.SAVED_NAME
        , C.SAVE_PATH
        , C.THUMBNAIL_PATH
        FROM PRODUCT A
        JOIN COMPANY B ON A.COMPANY_ID = B.ID <!-- join 확인-->
        LEFT JOIN ATTACHMENT C ON (A.ID = C.REF_PRODUCT_NO) <!-- join 확인-->
        WHERE A.STATUS = 'Y'
        AND A.ID = #{ pid }

    </select>

    <select id="selectProduct2" parameterType="_int" resultMap="productResultSet">
            select /*B.NAME 같아서 주의  COMPANYNAME*/
            A.ID
            , A.NAME
            , A.CONTENT
            , A.PRICE
            , A.COMPANY_ID
            , A.CREATED_DATE
            , A.CREATED_PERSON
            , B.NAME COMPANYNAME <!-- association 확인-->
            , B.TEL
            , C.ORIGINAL_NAME
            , C.SAVED_NAME
            , C.SAVE_PATH
            , C.THUMBNAIL_PATH
            FROM PRODUCT A
            JOIN COMPANY B ON A.COMPANY_ID = B.ID <!-- join 확인-->
            LEFT JOIN ATTACHMENT C ON (A.ID = C.REF_PRODUCT_NO) <!-- join 확인-->
            WHERE A.STATUS = 'Y'
            AND A.ID = #{ productId }

        </select>
    <update id="updateProduct" useGeneratedKeys="true"
            keyProperty="id">
        UPDATE PRODUCT
        SET
        NAME = #{ name },
        PRICE = #{ price },
        CONTENT = #{ content },
        COMPANY_ID = #{ company.id },
        MODIFIED_PERSON = #{ modifyPerson }
        WHERE
        ID = #{ id }
    </update>

    <delete id="deleteAttachment">
        DELETE FROM ATTACHMENT
        WHERE REF_PRODUCT_NO =
        <!--        넘어온 값이 하나이기 때문에 -->
        #{productId}
    </delete>

    <select id="selectSearchList" resultMap="productResultSet">
        select a.*, b.id company_id, b.name companyname /*b.id, name 컬럼명 주의*/
        from product a
        join company b on a.company_id = b.id
        <!-- where로 시작하고, and 나 or 가 나오면 삭제한다 -->
        <trim prefix="where" prefixOverrides="and | or">
            <!-- 제품 이름이 비어있지 않다면 -->
            <if test='!name.equals("")'>
            <!-- mySql 의 조건식(like)과 문자열 합성 메소드(concat) 를 사용하여 쿼리를 완성시킨다.            -->
                a.name like concat('%', #{name}, '%')
            </if>
            <!-- 회사 이름이 비어있지 않다면 -->
            <if test='!company.equals("")'>
                and b.name like concat('%', #{company}, '%')
            </if>
            <!-- 최소 가격이 비어있지 않다면 -->
            <if test='minPrice >= 0'>
                <!-- 쿼리에 '>', '=', '<' 이 들어가면 <![CDATA[]]>로 묶어줘야 함-->
                <![CDATA[and a.price >= #{minPrice}]]>
            </if>
            <!-- 최대 가격이 비어있지 않다면 -->
            <if test='maxPrice > 0'>
                <![CDATA[and a.price <= #{maxPrice}]]>
            </if>
        </trim>
        and status = 'y'
    </select>


</mapper>